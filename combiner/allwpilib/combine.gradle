import java.util.regex.Matcher;
import java.util.regex.Pattern;

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

if (!project.hasProperty('repo')) {
    project.extensions.repo = 'development'
}

publishing {
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/${project.repo}"
        }
    }
}

if (System.getenv()['RUN_AZURE_ARTIFACTORY_RELEASE'] != null) {
  artifactory {
    contextUrl = 'https://frcmaven.wpi.edu/artifactory' // base artifactory url
    publish {
      repository {
        if (project.hasProperty('releaseRepoPublish')) {
          repoKey = 'release'
        } else {
          repoKey = 'development'
        }
        username = System.getenv()['ARTIFACTORY_PUBLISH_USERNAME']
        password = System.getenv()['ARTIFACTORY_PUBLISH_PASSWORD']
        maven = true
      }
    }
    clientConfig.info.setBuildName('allwpilib')
  }
  publish.dependsOn artifactoryPublish
}

def allOutput = file('outputs')

def fileFinder = new FileNameFinder()

def zipFiles = files(fileFinder.getFileNames(new File(projectDir, 'products').absolutePath, '**/allOutputs/*.zip'))
def jarFiles = files(fileFinder.getFileNames(new File(projectDir, 'products').absolutePath, '**/allOutputs/*.jar'))

def allFiles = zipFiles + jarFiles

def pubVersion = file(fileFinder.getFileNames(new File(projectDir, 'products').absolutePath, '**/allOutputs/version.txt').first()).text.trim()

println pubVersion

String regex = "([_M_]*)_GROUP_([^\\.]+)_ID_([^\\.]+)_CLS([^\\.]*)."
Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);

def groups = [:]



for (File it : allFiles) {

  Matcher matcher = pattern.matcher(it.name);


  if (!matcher.find()) {
    continue
  }

  def generateAll = matcher.group(1) == '_M_'

  def groupId = matcher.group(2)
  def artifactId = matcher.group(3)
  def classifier = matcher.group(4)

  if (!classifier.empty) {
    classifier = classifier.substring(1)
  }

  def group = groups[groupId]
  if (group == null) {
    group = [:]
    groups[groupId] = group
  }


  def id = group[artifactId]
  if (id == null) {
    id = []
    group[artifactId] = id
  }

  id << new Tuple(classifier, generateAll, it)

}

task beforePublish() {

}

groups.each { key, value->
  value.each { key2, value2->
    def allClassifiers = []
    def isJar = false
    value2.each {
      if (it.get(1)) {
        allClassifiers << it.get(2)
        if (it.get(2).toString().endsWith('jar')) {
          isJar = true
        }
      }
    }
    if (!allClassifiers.empty) {
      def createdTask = project.tasks.create(key + key2 + 'all', isJar ? Jar : Zip) {
        allClassifiers.each {
          classifier = 'all'
          baseName = key + key2
          destinationDir = allOutput
          duplicatesStrategy = 'exclude'

          allClassifiers.each {
            from project.zipTree(it)
          }
        }
      }
      beforePublish.dependsOn createdTask
      value2 << new Tuple('all', false, createdTask)

    }
  }
}

publishing {
  publications {
    groups.each { key, value->
      value.each { key2, value2->
        "${key}${key2}"(MavenPublication) {
          value2.each { t->
            artifact (t.get(2)) {
              if (!t.get(0).empty) {
                classifier = t.get(0)
              }
            }
          }
          groupId = key.replace('_', '.')
          artifactId = key2
          version = pubVersion
        }
        if (System.getenv()['RUN_AZURE_ARTIFACTORY_RELEASE'] != null) {
          project.artifactoryPublish {
              publications("${key}${key2}")
          }
        }
      }
    }
  }
}
